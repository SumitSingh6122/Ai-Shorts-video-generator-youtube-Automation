name: Video Production Pipeline

on:
  workflow_dispatch:
    inputs:
      audioURL:
        description: 'URL of the audio file'
        required: true
      captionJson:
        description: 'JSON array of captions'
        required: true
      imageJson:
        description: 'JSON array of image URLs'
        required: true
      CaptionStyle:
        description: 'JSON of text styling'
        required: true

env:
    CLOUDINARY_FOLDER: 'rendered-videos'
    CLOUDINARY_CLOUD_NAME: 'dk75dh0nv'
    CLOUDINARY_API_KEY: '475864168871595'
    CLOUDINARY_API_SECRET: '-CkPLllqq-nfCMVMMeRI1Z_SAwg'

jobs:
  render-and-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - run: npm ci
      
      - name: Prepare Input Data
        run: |
          echo '${{ toJson(github.event.inputs) }}' > inputs.json
          jq '{
            videoData: {
              audioURL: .audioURL,
              captionJson: (.captionJson | fromjson),
              image: (.imageJson | fromjson),
              CaptionStyle: (.CaptionStyle | fromjson)
            }
          }' inputs.json > input-props.json

      - name: Render Video
        run: npx remotion render src/index.tsx MyVideo out/video.mp4 --props=./input-props.json

      - name: Verify Render Output
        run: |
          if [ ! -f out/video.mp4 ]; then
            echo "❌ Render failed: No output file found"
            exit 1
          fi
          echo "✅ Render successful - File size: $(du -h out/video.mp4 | cut -f1)"

      - name: Install Dependencies
        run: sudo apt-get install -y jq

      - name: Upload to Cloudinary
        run: |
          curl -X POST \
            -F "file=@out/video.mp4" \
            -F "folder=$CLOUDINARY_FOLDER" \
            -F "upload_preset=ml_default" \
            "https://api.cloudinary.com/v1_1/$CLOUDINARY_CLOUD_NAME/video/upload" \
            -o response.json

          if [ $? -ne 0 ]; then
            echo "❌ Cloudinary upload failed"
            exit 1
          fi

      - name: Extract Cloudinary URL
        id: cloudinary
        run: |
          URL=$(jq -r '.secure_url' response.json)
          echo "CLOUDINARY_URL=$URL" >> $GITHUB_ENV
          echo "✅ Upload successful - URL: $URL"

    outputs:
      cloudinaryUrl: ${{ env.CLOUDINARY_URL }}

      