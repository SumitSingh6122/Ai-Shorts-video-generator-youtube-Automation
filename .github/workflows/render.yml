name: Video Production Pipeline

on:
  workflow_dispatch:
    inputs:
      audioURL:
        description: 'URL of the audio file'
        required: true
      captionJson:
        description: 'JSON array of captions'
        required: true
      imageJson:
        description: 'JSON array of image URLs'
        required: true
      caption_Style:
        description: 'JSON of text styling (as string)'
        required: true
      videoId:
        description: 'ID of the video record in Convex'
        required: true

jobs:
  render-and-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - run: npm ci --legacy-peer-deps

      - name: Prepare Input Data
        run: |
          jq -n \
          --arg audioURL "${{ github.event.inputs.audioURL }}" \
          --argjson captionJson "${{ github.event.inputs.captionJson }}" \
          --argjson image "${{ github.event.inputs.imageJson }}" \
          --argjson caption_Style "${{ github.event.inputs.caption_Style }}" \
          '{videoData: {
            audioURL: $audioURL,
            captionJson: $captionJson,
            image: $image,
            caption_Style: $caption_Style
          }}' > input-props.json
          

      - name: Validate JSON
        run: jq empty input-props.json

      - name: Render Video
        run: npx remotion render remotion/index.ts MyVideo out/video.mp4 --props=./input-props.json

      - name: Verify Render Output
        run: |
          if [ ! -f out/video.mp4 ]; then
            echo "❌ Render failed: No output file found"
            exit 1
          fi
          echo "✅ Render successful - File size: $(du -h out/video.mp4 | cut -f1)"

      - name: Upload to Cloudinary
        env:
          CLOUDINARY_CLOUD_NAME: dk75dh0nv
          CLOUDINARY_API_KEY: 475864168871595
          CLOUDINARY_API_SECRET: -CkPLllqq-nfCMVMMeRI1Z_SAwg
        run: |
          npm install cloudinary --legacy-peer-deps
          node -e "
          const cloudinary = require('cloudinary').v2;
          cloudinary.config({
            cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
            api_key: process.env.CLOUDINARY_API_KEY,
            api_secret: process.env.CLOUDINARY_API_SECRET
          });
          cloudinary.uploader.upload('out/video.mp4', { resource_type: 'video', folder: 'renders', overwrite: true }, (error, result) => {
            if (error) {
              console.error('❌ Cloudinary upload failed:', error);
              process.exit(1);
            }
            console.log('✅ Cloudinary upload successful:', result.secure_url);
            require('fs').writeFileSync('cloudinary-response.json', JSON.stringify(result));
          });
          "

      - name: Notify Frontend
        run: |
          VIDEO_URL=$(jq -r .secure_url cloudinary-response.json)
          curl -X POST "https://ai-shorts-video-gen.vercel.app/api/webhook" \
            -H "Content-Type: application/json" \
            -d "{\"video_url\": \"$VIDEO_URL\", \"videoId\": \"${{ github.event.inputs.videoId }}\"}"